#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const mustache = require('mustache')
const Task = require('folktale/data/task')
const tocTask = require('../lib/toc')

const src = 'src'
const dist = 'dist'

const indexTemplate = path.join(src, 'index.mustache')
const indexDist = path.join(dist, 'index.html')
const entryTemplate = path.join(src, 'entry.mustache')
const entryDist = path.join(dist, 'entries')

//    readFile : String   -> Task Err String
const readFile = filepath => Task.fromNodeback(fs.readFile)(filepath, { encoding: 'utf-8' })

//    writeFile : String   -> Task Err ()
const writeFile = filepath => contents => Task.fromNodeback(fs.writeFile)(filepath, contents)

//    setExit : Int    -> String  -> () -> ()
const setExit = status => message => () => {
  process.exitCode = status
  console.log(message)
}

tocTask().chain(function (toc) {
  const writeIndex = readFile(indexTemplate)
    .chain(string => writeFile(indexDist)(mustache.render(string, toc)))

  const writeEntry = entry => {
    const file = entry.src
    const outputFile = path.join(entryDist, path.basename(file))

    return Task
      .waitAll([
        readFile(file),
        readFile(entryTemplate)
      ])
      .chain(([partial, entryTemplateString]) => writeFile(outputFile)(mustache.render(
        entryTemplateString,
        { title: entry.name },
        { entry: partial })
      ))
  }

  return Task.waitAll([writeIndex].concat(toc.entries.map(writeEntry)))
}).run().listen({
  onCancelled: setExit(-1)('?'),
  onResolved: setExit(0)('✓'),
  onRejected: setExit(1)('✗')
})
