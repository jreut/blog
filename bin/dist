#!/usr/bin/env node
/* global compose, chain, map, concat */

const path = require('path')
require('pointfree-fantasy').expose(global)
const mustache = require('mustache')
const postcss = require('postcss')([
  require('cssnano'),
  require('postcss-cssnext')
])
const Task = require('folktale/data/task')
const fs = require('../lib/fs')
const prop = require('../lib/util').prop
const tocTask = require('../lib/toc')

const src = 'src'
const dist = 'dist'

const indexTemplate = path.join(src, 'index.mustache')
const indexDist = path.join(dist, 'index.html')
const entryTemplate = path.join(src, 'entry.mustache')
const entryDist = path.join(dist, 'entries')

// processStyle    : String   -> String
const processStyle = basename => contents =>
  Task.fromPromised(() =>
    postcss.process(contents, {
      from: path.join(src, basename),
      to: path.join(dist, basename)
    })
  )()

const render = template => view => partials =>
  // TODO: memoize reading this file
  fs.readFile(path.join(src, 'head.html'))
    .map(headPartial => mustache.render(
      template,
      view,
      Object.assign(partials, { head: headPartial })
    ))

//    setExit : Int    -> String -> String -> ()
const setExit = status => label => message => {
  process.exitCode = status
  console.log(label, message)
}

//    transformOneStyleSheet : String   -> Task Err String
const transformOneStylesheet = basename => compose(
  chain(fs.writeFile(path.join(dist, 'stylesheets', basename))),
  chain(processStyle(basename)),
  fs.readFile
)(path.join(src, 'stylesheets', basename))

tocTask.chain(toc => {
  const writeStyles = compose(
    chain(
      compose(
        Task.waitAll,
        map(compose(transformOneStylesheet, path.basename))
      )
    ),
    fs.readdir
  )(path.join(src, 'stylesheets'))

  const writeIndex = compose(
    chain(fs.writeFile(indexDist)),
    chain(string => render(string)(toc)({})),
    fs.readFile
  )(indexTemplate)

  //    writeEntry : Object -> Task Err String
  const writeEntry = entry => {
    const file = entry.src
    const outputFile = path.join(entryDist, path.basename(file))
    const renderEntry = ([partial, entryTemplateString]) => render(entryTemplateString)({
      title: entry.name,
      timestamp: entry.created.timestamp
    })({
      entry: partial
    })

    return compose(
      chain(fs.writeFile(outputFile)),
      chain(renderEntry),
      Task.waitAll,
      map(fs.readFile)
    )([file, entryTemplate])
  }

  return compose(
    map(concat('\n')),
    map(statuses => statuses.join('\n')),
    Task.waitAll,
    concat([writeIndex, writeStyles]),
    map(writeEntry),
    prop('entries')
  )(toc)
}).run().listen({
  onCancelled: setExit(-1)('?'),
  onResolved: setExit(0)('✓'),
  onRejected: setExit(1)('✗')
})
