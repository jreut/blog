#!/usr/bin/env node

const sprintf = require('util').format
const spawn = require('child_process').spawn
const http = require('http')
const path = require('path')
const chokidar = require('chokidar')
const liveReload = require('tiny-lr')

const liveReloadPort = 35729
const executable = 'yarn'

const sendChange = function (file) {
  http.get(sprintf('http://localhost:%d/changed?files=%s', liveReloadPort, file))
}

const reload = function (label) {
  return function (filePath) {
    console.log('%s: %s', label, filePath)
    const out = process.stdout
    const flags = ['run', 'dist']
    out.write('Running ' + [executable, flags.join(' ')].join(' ') + '...')
    const child = spawn(executable, flags, { stdio: ['ignore', 'ignore', 'inherit'] })
    child.on('exit', function (status) {
      if (status === 0) {
        out.write('done.\n')
        sendChange(path.relative('src/', filePath))
      } else {
        out.write('failed.\n')
        console.error('something went wrong :/')
      }
    })
  }
}

liveReload().listen(liveReloadPort, function () {
  console.log('LiveReload listening on %d...', liveReloadPort)
  // TODO: debounce me
  chokidar
    .watch('src', { persistent: true })
    .on('add', reload('added'))
    .on('change', reload('changed'))
    .on('unlink', reload('removed'))
})

spawn(executable, ['run', 'serve'], { stdio: ['ignore', 'ignore', 'inherit'] })
